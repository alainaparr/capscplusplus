#include <iostream>
#include <fstream>
#include <vector>
#include <sstream>
#include <iomanip>
#include <algorithm>

using namespace std;

// Structure to store racer data
struct Racer {
    int number;
    vector<string> times; // time stamps for each sensor
};

// Function to convert time stamp to seconds
int timeToSeconds(const string& time) {
    int hours, minutes, seconds;
    stringstream ss(time);
    char delimiter;
    ss >> hours >> delimiter >> minutes >> delimiter >> seconds;
    return hours * 3600 + minutes * 60 + seconds;
}

// Function to calculate time difference in minutes
double calculateTimeDifference(const string& startTime, const string& endTime) {
    int startSeconds = timeToSeconds(startTime);
    int endSeconds = timeToSeconds(endTime);
    return (endSeconds - startSeconds) / 60.0; // convert to minutes
}

// Function to calculate pace in minutes per mile
double calculatePace(double timeDifference, double distance) {
    return timeDifference / distance;
}

int main() {
    ifstream inputFile("16.txt"); // Open the file
    if (!inputFile) {
        cerr << "Error: Unable to open file" << endl;
        return 1;
    }

    vector<Racer> racers;
    string line;
    while (getline(inputFile, line)) { // Read data from file
        istringstream iss(line);
        string token;
        getline(iss, token, ','); // Read sensor ID
        int sensorID = stoi(token);
        if (sensorID == 0) { // New racer data
            Racer racer;
            getline(iss, token, ','); // Read racer number
            racer.number = stoi(token);
            while (getline(inputFile, line)) { // Read racer's times
                if (line.empty()) break;
                racer.times.push_back(line);
            }
            racers.push_back(racer);
        }
    }

    // Ask for racer number
    int racerNumber;
    cout << "Enter racer number: ";
    cin >> racerNumber;

    // Find racer by number
    auto it = find_if(racers.begin(), racers.end(), [&racerNumber](const Racer& racer) {
        return racer.number == racerNumber;
    });

    if (it != racers.end()) { // Racer found
        Racer racer = *it;

        // Calculate split times and overall race time
        double overallRaceTime = calculateTimeDifference(racer.times.front(), racer.times.back());
        double split1Time = calculateTimeDifference(racer.times.front(), racer.times[1]);
        double split2Time = calculateTimeDifference(racer.times[1], racer.times.back());

        // Output results
        cout << "Racer " << racerNumber << " overall finish place: " << distance(racers.begin(), it) + 1 << endl;
        cout << "Split 1 time: " << fixed << setprecision(2) << split1Time << " minutes/mile" << endl;
        cout << "Split 2 time: " << fixed << setprecision(2) << split2Time << " minutes/mile" << endl;
        cout << "Overall race time: " << fixed << setprecision(2) << overallRaceTime << " minutes" << endl;
        cout << "Overall race pace: " << fixed << setprecision(2) << calculatePace(overallRaceTime, 13.1) << " minutes/mile" << endl;
    } else { // Racer not found
        cout << "Racer not found." << endl;
    }

    return 0;
}

