#include <iostream>
#include <fstream>
#include <vector>
#include <sstream>
#include <iomanip>
#include <algorithm>

using namespace std;

// Structure to store racer data
struct Racer {
    int number;
    vector<string> times; // time stamps for each sensor
};

// Function to convert time stamp to seconds
int timeToSeconds(const string& time) {
    int hours, minutes, seconds;
    stringstream ss(time);
    char delimiter;
    ss >> hours >> delimiter >> minutes >> delimiter >> seconds;
    return hours * 3600 + minutes * 60 + seconds;
}

// Function to calculate time difference in minutes
double calculateTimeDifference(const string& startTime, const string& endTime) {
    int startSeconds = timeToSeconds(startTime);
    int endSeconds = timeToSeconds(endTime);
    return (endSeconds - startSeconds) / 60.0; // convert to minutes
}

// Function to calculate pace in minutes per mile
double calculatePace(double timeDifference, double distance) {
    return timeDifference / distance;
}

int main() {
    ifstream inputFile("16.txt"); // Open the file
    if (!inputFile) {
        cerr << "Error: Unable to open file" << endl;
        return 1;
    }

    vector<Racer> racers;
    string line;
    while (getline(inputFile, line)) { // Read data from file
        istringstream iss(line);
        string token;
        getline(iss, token, ','); // Read sensor ID
        int sensorID = stoi(token);
        if (sensorID == 0) { // New racer data
            Racer racer;
            getline(iss, token, ','); // Read racer number
            racer.number = stoi(token);
            while (getline(inputFile, line)) { // Read racer's times
                if (line.empty()) break;
                racer.times.push_back(line);
            }
            racers.push_back(racer);
        }
    }

    // Check for cheating
    vector<pair<int, string>> suspectedCheaters; // Store suspected cheaters with reason

    for (const auto& racer : racers) {
        // Check for missing sensors
        if (racer.times.size() < 3) {
            suspectedCheaters.push_back({racer.number, "Missed sensors (shortcut suspected)"});
            continue; // Skip further checks for this racer
        }

        // Calculate split times
        double split1Time = calculateTimeDifference(racer.times.front(), racer.times[1]);
        double split2Time = calculateTimeDifference(racer.times[1], racer.times.back());

        // Check for suspiciously fast split times
        if (split1Time < 4.5 || split2Time < 4.5) {
            suspectedCheaters.push_back({racer.number, "Suspiciously fast split time (vehicle suspected)"});
        }
    }

    // Output suspected cheaters
    if (suspectedCheaters.empty()) {
        cout << "No suspected cheaters detected." << endl;
    } else {
        cout << "Suspected cheaters:" << endl;
        for (const auto& suspected : suspectedCheaters) {
            cout << "Racer " << suspected.first << ": " << suspected.second << endl;
        }
    }

    return 0;
}
