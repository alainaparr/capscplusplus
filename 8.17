#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <algorithm>

struct RaceData {
    int sensorID;
    int racerNumber;
    int hours;
    int minutes;
    int seconds;
};

struct RacerResult {
    int racerNumber;
    int finishPlace;
    double splitTimes[2];
    double overallTime;
    double overallPace;
    bool missedSensor;
    bool suspiciousSplit;
};

int main() {
    std::ifstream logFile("race_log.txt");
    std::string line;
    std::vector<RaceData> raceLog;

    // Read the gun time
    std::getline(logFile, line);

    // Read the race log data
    while (std::getline(logFile, line)) {
        std::istringstream iss(line);
        RaceData data;
        char comma;

        iss >> data.sensorID >> comma >> data.racerNumber >> comma >> data.hours >> data.minutes >> data.seconds;
        raceLog.push_back(data);
    }

    logFile.close();

    // Process the race log data
    std::vector<RacerResult> results;

    for (const auto& data : raceLog) {
        if (data.sensorID == 0) {
            RacerResult result;
            result.racerNumber = data.racerNumber;
            result.splitTimes[0] = 0.0;
            result.splitTimes[1] = 0.0;
            result.overallTime = 0.0;
            result.overallPace = 0.0;
            result.missedSensor = false;
            result.suspiciousSplit = false;
            results.push_back(result);
        }
    }

    for (auto& result : results) {
        double startTime = 0.0;
        double midpointTime = 0.0;
        double finishTime = 0.0;

        for (const auto& data : raceLog) {
            if (data.racerNumber == result.racerNumber) {
                double time = data.hours * 3600 + data.minutes * 60 + data.seconds;

                if (data.sensorID == 0) {
                    startTime = time;
                } else if (data.sensorID == 1) {
                    midpointTime = time;
                } else if (data.sensorID == 2) {
                    finishTime = time;
                }
            }
        }

        result.splitTimes[0] = (midpointTime - startTime) / 420; // 7 miles * 60 seconds
        result.splitTimes[1] = (finishTime - midpointTime) / 366; // 6.1 miles * 60 seconds
        result.overallTime = finishTime - startTime;
        result.overallPace = result.overallTime / 786; // 13.1 miles * 60 seconds
    }

    // Sort the results based on overall time
    std::sort(results.begin(), results.end(), [](const RacerResult& a, const RacerResult& b) {
        return a.overallTime < b.overallTime;
    });

    // Assign finish places
    for (size_t i = 0; i < results.size(); ++i) {
        results[i].finishPlace = i + 1;
    }

    // Detect cheating
    std::vector<std::pair<int, std::string>> suspectedCheaters;

    for (const auto& result : results) {
        bool cheated = false;
        std::string reason;

        // Check for missed sensors
        if (result.splitTimes[0] == 0.0 || result.splitTimes[1] == 0.0) {
            cheated = true;
            reason = "Missed sensor";
        }

        // Check for suspiciously fast race splits
        if (result.splitTimes[0] < 4.5 || result.splitTimes[1] < 4.5) {
            cheated = true;
            reason = "Suspiciously fast split";
        }

        if (cheated) {
            suspectedCheaters.emplace_back(result.racerNumber, reason);
        }
    }

    // Print the list of suspected cheaters
    if (!suspectedCheaters.empty()) {
        std::cout << "Suspected Cheaters:" << std::endl;
        for (const auto& cheater : suspectedCheaters) {
            std::cout << "Racer " << cheater.first << ": " << cheater.second << std::endl;
        }
    } else {
        std::cout << "No suspected cheaters found." << std::endl;
    }

    return 0;
}
